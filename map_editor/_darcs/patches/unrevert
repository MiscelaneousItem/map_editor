
New patches:

[unrevert
anon**20220319015845
 Ignore-this: 4537d521b2571930a9a66aa94649e78b
] hunk ./project.c 1
-#include "raylib.h"
-#include <stdlib.h>
-#include <math.h>
-
-const int max_filename_length = 64;
-char eof = '\0';
-
-#include "ecs.h"
-#include "tileset.h"
-
-bool RectangleClicked(Rectangle rec) {
-  return (IsMouseButtonDown(MOUSE_BUTTON_LEFT) && CheckCollisionPointRec(GetMousePosition(), rec));
-}
-
-void InputToChar(Vector* storage) {
-  int key = GetCharPressed();
-  while(key > 0) {
-    if((key >= 32) && (key <= 125)) {
-      SetVectorValue(storage, storage->length, &key);
-      storage->length++;
-      SetVectorValue(storage, storage->length, &eof);
-    }
-    key = GetCharPressed();
-  }
-  if(IsKeyPressed(KEY_BACKSPACE)) {
-    storage->length--;
-    if (storage->length < 0) storage->length = 0;
-    SetVectorValue(storage, storage->length, &eof);
-  }
-};
-
-void DrawTextComposite(const char* str1, const char* str2, Color c1, Color c2, int fontsize,Vector2 pos) {
-  DrawText(str1, pos.x, pos.y , fontsize, c1);
-  DrawText(str2, pos.x + MeasureText(str1, fontsize) + MeasureText(" ", fontsize)*2, pos.y, fontsize, c2);
-}
-
-void DrawTextComposite3(const char* str1, const char* str2, const char* str3, Color c1, Color c2, Color c3, int fontsize,Vector2 pos) {
-  DrawText(str1, pos.x, pos.y , fontsize, c1);
-  DrawText(str2, pos.x + MeasureText(str1, fontsize) + MeasureText(" ", fontsize)*2, pos.y , fontsize, c2);
-  DrawText(str3, pos.x + MeasureText(str1, fontsize) + MeasureText(str2, fontsize) + MeasureText(" ", fontsize)*4, pos.y , fontsize, c3);
-}
-
-bool ButtonCompositeClicked(const char* str1, const char* str2, int fontsize,Vector2 pos) {
-  return RectangleClicked((Rectangle){pos.x, pos.y, pos.x + fontsize + MeasureText(TextFormat("%s  %s", str1, str2), fontsize), pos.y + fontsize});
-}
-
-void GuiUpdateTypeEdit(bool* clicks, TerrainType t, int fontsize, Vector2 pos) {
-  if(ButtonCompositeClicked("texture path:", TextFormat("%s", t.tex_path), fontsize, (Vector2){pos.x + fontsize, pos.y + fontsize})) {
-    clicks[0] = true;
-    clicks[1] = false;
-  }
-  else if(ButtonCompositeClicked("id:", TextFormat("%i", t.id), fontsize, (Vector2){pos.x + fontsize, pos.y + fontsize*2})) {
-    clicks[1] = true;
-    clicks[0] = false;
-  }
-  else if(IsMouseButtonDown(MOUSE_BUTTON_LEFT)) {
-    clicks[0] = false;
-    clicks[1] = false;
-  }
-}
-
-void GuiRenderTypeEdit(TerrainType* t, Vector2 pos, bool* clicks, Vector* input, char** current_error_msg) {
-  const int fontsize = 18;
-  GuiUpdateTypeEdit(clicks, *t, fontsize, pos);
-  DrawRectangleV(pos, (Vector2){GetScreenWidth(),GetScreenHeight()}, DARKGRAY);
-  if(!clicks[0]) {
-    DrawTextComposite("texture path:", TextFormat("%s", t->tex_path), GRAY, WHITE, fontsize, (Vector2){pos.x + fontsize, pos.y + fontsize});
-  }
-  else {
-    DrawTextComposite3("texture path:", TextFormat("%s", input->data), *(current_error_msg), GRAY, WHITE, RED, fontsize, (Vector2){pos.x + fontsize, pos.y + fontsize});
-    InputToChar(input);
-    if(IsKeyPressed(KEY_ENTER)) {
-      FILE* f = fopen(input->data, "r");
-      if( f > 0) {
-	free(t->tex_path);
-	t->tex_path = calloc(64, sizeof(char));
-	strcpy(t->tex_path, input->data);
-	t->tex = LoadTexture(input->data);
-	SetVectorValue(input, 0, &eof);
-	input->length = 0;
-	*current_error_msg = "\0";
-	clicks[0] = false;
-	fclose(f);      
-      }
-      else *(current_error_msg) = "[no such file or directory]";
-    }
-  }
-  DrawTextComposite("id:", TextFormat("%i", t->id), GRAY, WHITE, fontsize, (Vector2){pos.x + fontsize, pos.y + fontsize*2});
-}
-
-void GuiUpdateTypeSelect(int* selected_tile, int* selected_type, TileSet t, Vector2 pos) {
-  (*selected_type) -= GetMouseWheelMove();
-  if((*selected_type) < 0) (*selected_type) = t.typeset.types.length;
-  else if ((*selected_type) > t.typeset.types.length) (*selected_type) = 0;
-    
-  if(CheckCollisionPointRec(GetMousePosition(), (Rectangle){0, 0, (t.size.a - 1) * tilesize, (t.size.b - 1) * tilesize}))
-      (*selected_tile) = trunc((int)GetMousePosition().x/tilesize) +
-	trunc((int)GetMousePosition().y/tilesize) * t.size.a;
-  else (*selected_tile) = -1;
-
-  for(int i = 0; i < t.typeset.types.length; i++) {
-    if(CheckCollisionPointRec(GetMousePosition(), (Rectangle){ pos.x - 0.5 * tilesize, pos.y + (tilesize*2.75)*i,  3 * tilesize, 3 * tilesize }) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) {
-      (*selected_type) = i;
-    }
-  }
-}
-
-#define AGRAY CLITERAL (Color){127, 127, 127, 75}
-#define ADARKGRAY CLITERAL (Color){100, 100, 100, 255}
-
-void GuiRenderTypeSelect(int selected_type, TypeSet t, Vector2 pos, Texture2D plus_tex){
-  DrawRectangleV(pos, (Vector2){tilesize*2.5, GetScreenHeight()}, AGRAY);
-  DrawRectangleV( (Vector2){ pos.x - 0.5 * tilesize, pos.y + (tilesize*2.75)*selected_type}, (Vector2){ 3 * tilesize, 3 * tilesize }, DARKGRAY);
-  for(int i = 0; i <= t.types.length; i++) {
-    float offset = 0.;
-    float scale = 2.;
-    if(i == selected_type) {
-      offset = 2/2.5 * tilesize;
-      scale = 2.5;
-    }
-    if(i < t.types.length) DrawTextureEx( ((TerrainType*)AccessVectorElement(i, t.types))->tex, (Vector2){pos.x + 0.25 * tilesize - offset/1.5, pos.y + tilesize*2.75*i + tilesize*0.5 - offset/3. }, 0.f, scale, WHITE);
-    else DrawTextureEx(plus_tex, (Vector2){pos.x + 0.25 * tilesize - offset/1.5, pos.y + tilesize*2.75*t.types.length + tilesize*0.5 - offset/3. }, 0.f, scale, GRAY);
-  }
- 
-}
-
-void hobbes_logger(int msgType, const char* text, va_list args){
-  switch (msgType) {
-  case LOG_ERROR: printf("[ERROR]: %s \n", text); break;
-  case LOG_WARNING: printf("[WARNNG]: %s \n", text); break;
-  case LOG_DEBUG: printf("[DEBUG]: %s \n", text); break;
-  }
-}
-
-int main() {
-
-  SetTraceLogCallback(hobbes_logger);
-
-  SetConfigFlags(FLAG_WINDOW_RESIZABLE);
-  
-  InitWindow(890, 600, "project");
-  SetExitKey(KEY_NULL);
-
-  TypeSet typeset = NewTypeSet("terrain_types.typeset");
-  
-  TerrainType type0 = { LoadTexture("null.png"), "null.png", 0 };
-  type0.tex_path = calloc(64, sizeof(char));
-  strcpy(type0.tex_path, "null.png");
-  TerrainType type1 = { LoadTexture("1.png"), "1.png", 1 };
-  type1.tex_path = calloc(64, sizeof(char));
-  strcpy(type1.tex_path, "1.png");
-  AddToVector(&(typeset.types), &type0);
-  AddToVector(&(typeset.types), &type1);
-
-  int selected_tile = -1;
-  int selected_type = 0;
-  TileSet current_tileset = NewTileSet(typeset, (int2){16, 16});
-
-  int current_dialog_option = -1;
-  const int dialog_option_size = 32; 
-  char* current_dialog_option_name = calloc(dialog_option_size, sizeof(char));
-
-  const int error_size = 32;
-  char* current_error_msg = calloc(error_size, sizeof(char));
-
-  bool type_edit_clicks[2] = { 0 };
-  
-  Vector input = NewVector(sizeof(char));
-  SetVectorValue(&input, 0,  &eof);
-
-  Texture plus_tex = LoadTexture("plus.png");
-
-  TerrainType default_type = { LoadTexture("plus.png"), "", 0};
- default_type.tex_path = calloc(max_filename_length, sizeof(char));
- strcpy(default_type.tex_path, "null.png");
-  
-  while(!WindowShouldClose()) {
-
-    GuiUpdateTypeSelect(&selected_tile, &selected_type, current_tileset, (Vector2){ GetScreenWidth()/1.5 - 2.5*tilesize, 0 });
-    
-    if(IsMouseButtonDown(MOUSE_BUTTON_LEFT) && selected_tile != -1) ((Tile*)AccessVectorElement(selected_tile, current_tileset.tiles))->type = ((TerrainType*)AccessVectorElement(selected_type, current_tileset.typeset.types));
-    
-    if(CheckCollisionPointRec(GetMousePosition(), (Rectangle){ GetScreenWidth()/1.5  - 2.5*tilesize - 0.5 * tilesize, 0 + (tilesize*2.75)*current_tileset.typeset.types.length,  3 * tilesize, 3 * tilesize }) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) {
-      NewTypeToTileSet(&(current_tileset.typeset), default_type);
-    }
-    
-
-    if(current_dialog_option != -1) {
-      if(current_dialog_option == 0) {
-	current_dialog_option_name = "[export file to]: ";
-	if(IsKeyPressed(KEY_ENTER)) {
-	  ExportTileSet(current_tileset, input.data);
-	  SetVectorValue(&input, 0, &eof);
-	  input.length = 0;
-	  current_dialog_option = -1;
-	  current_dialog_option_name = "\0";
-
-	}
-      }
-      else if(current_dialog_option == 1) {
-	current_dialog_option_name = "[load file]:";
-	    if(IsKeyPressed(KEY_ENTER)) {
-	      FILE* f = fopen(input.data, "r");
-	      if(f > 0) {
-		current_tileset = LoadTileSet(input.data);
-		SetVectorValue(&input, 0, &eof);
-		input.length = 0;
-		current_dialog_option = -1;
-		current_dialog_option_name = "\0";
-		current_error_msg = "\0";
-	      }
-	      else current_error_msg = "[no such file or directory]";
-	      fclose(f);
-	    }
-      }
-      else if(current_dialog_option == 2) {
-	current_dialog_option_name = "[resize current tileset to]:";
-	    if(IsKeyPressed(KEY_ENTER)) {
-	      TileSet t = NewTileSet(current_tileset.typeset, (int2){atoi(input.data), atoi(input.data)});
-	      current_tileset = MergeTileSet(t, current_tileset);
-	      //current_tileset = t;
-	      SetVectorValue(&input, 0, &eof);
-	      input.length = 0;
-	      current_dialog_option = -1;
-	      current_dialog_option_name = "\0";
-	    }
-      }
-      InputToChar(&input);
-    }
-    
-    if(IsKeyDown(KEY_F1)) current_dialog_option = 0;
-    if(IsKeyDown(KEY_F2)) current_dialog_option = 1;
-    if(IsKeyDown(KEY_F3)) current_dialog_option = 2;
-
-    BeginDrawing();
-    ClearBackground(BLACK);
-    RenderTileSet(current_tileset);
-    if(selected_type != current_tileset.typeset.types.length) {
-      GuiRenderTypeEdit(((TerrainType*)AccessVectorElement(selected_type, current_tileset.typeset.types)), (Vector2){GetScreenWidth()/1.5, 0}, type_edit_clicks, &input, &current_error_msg);
-    }
-    else {
-      GuiRenderTypeEdit(&default_type, (Vector2){GetScreenWidth()/1.5, 0}, type_edit_clicks, &input, &current_error_msg);
-    }
-    GuiRenderTypeSelect(selected_type, current_tileset.typeset, (Vector2){ GetScreenWidth()/1.5 - 2.5*tilesize, 0 }, plus_tex);
-    if(current_dialog_option != -1) {
-    DrawText(TextFormat("%s %s", current_dialog_option_name, input.data), 2, 2 , 16.,  WHITE);
-    };
-    DrawText(TextFormat("%s", current_error_msg), MeasureText(TextFormat("%s %s", current_dialog_option_name, input.data), 16) + MeasureText(" ", 16)*2, 2 , 16.,  RED);
-
-    EndDrawing();
-  }
-  CloseWindow();
-
-  return 0;
-};
rmfile ./project.c
hunk ./tileset.h 1
-typedef struct TerrainType {
-  Texture tex;
-  char* tex_path;
-  int id;
-} TerrainType;
-
-typedef struct TypeSet {
-  Vector types;
-  char* name;
-} TypeSet;
-
-TypeSet NewTypeSet(char* name) {
-  TypeSet output;
-  output.types = NewVector(sizeof(TerrainType));
-  output.name = calloc(max_filename_length, sizeof(char));
-  strcpy(output.name, name);
-  return output;
-}
-
-void NewTypeToTileSet(TypeSet* typeset, TerrainType template) {
-  TerrainType t = { LoadTexture(template.tex_path), template.tex_path, typeset->types.length };
-  t.tex_path = calloc(64, sizeof(char));
-  strcpy(t.tex_path, template.tex_path);
-  AddToVector(&(typeset->types), &t);
-}
-
-void ExportTypeSet(TypeSet typeset) {
-  FILE* target = fopen(typeset.name, "w");
-  for(int i = 0; i < typeset.types.length; i++) {
-    fprintf(target, "%i %s \n",((TerrainType*)AccessVectorElement(i, typeset.types))->id, ((TerrainType*)AccessVectorElement(i, typeset.types))->tex_path);
-  }
-  fclose(target);
-}
-
-TypeSet LoadTypeSet(char* target_file) {
-  FILE* f = fopen(target_file, "r");
-  if (!f) {
-    perror (target_file);
-    exit (1);
-  }
-  fseek(f, 0, SEEK_END);
-  long fsize = ftell(f);
-  rewind(f);
-  char *string = malloc(fsize + 1);
-  fread(string, fsize, 1, f);
-  fclose(f);
-  
-  int j = 0;
-  int nth_element = 0;
-  int i = 0;
-  int r = 0;
-  char* eval = calloc(fsize, sizeof(char));
-
-  TypeSet output = NewTypeSet(target_file);
-  TerrainType type_being_worked_on;
-  type_being_worked_on.tex_path = calloc(fsize, sizeof(char));
-  
-  for(i = 0; i < fsize; i++) {
-    if(string[i] != '\n' && string[i] != ' ' ) {
-      eval[r] = string[i];
-      r++;
-    }
-    else {
-      switch(j) {
-      case 0: type_being_worked_on.id = atoi(eval); break;
-      case 1:
-	type_being_worked_on.tex = LoadTexture(eval);
-	strncpy(type_being_worked_on.tex_path, eval, strlen(eval));
-	break;
-      }
-      free(eval);
-      eval = calloc(fsize, sizeof(char));
-      j++;
-      r = 0;
-      if(string[i] == '\n') {
-	AddToVector(&output.types, &type_being_worked_on);
-	type_being_worked_on.tex_path = calloc(fsize, sizeof(char));
-	j = 0;
-	nth_element++;
-      }
-    }
-
-  }
-  free(eval);
-  return output;
-}
-
-typedef struct Tile {
-  TerrainType* type;
-  int2 cl;
-  Vector2 pos;
-  bool border;
-} Tile;
-
-const int n_tile_elements = 3;
-
-typedef struct TileSet {
-  Vector tiles;
-  int2 size;
-  TypeSet typeset;
-} TileSet;
-
-const int tilesize = 16;
-
-TileSet NewTileSet( TypeSet typeset, int2 size ) {
-  Vector tiles = NewVector(sizeof(Tile));
-  int c;
-  int l;
-  for(l = 0; l < size.b; l++ ) {
-    for(c = 0; c < size.a; c++ ) {
-      TerrainType* tile_type = AccessVectorElement(0, typeset.types );
-      Tile tile = {tile_type, (int2){c, l}, (Vector2){c*tilesize, l*tilesize}, false};
-      if(c == size.a - 1 || c == 0 || l == size.b - 1 || l == 0 ) tile.border = true;
-      AddToVector(&tiles, &tile);
-    }
-    c = 0;
-  }
-  TileSet output = { tiles, size, typeset };
-  return output;
-}
-
-TileSet MergeTileSet(TileSet dest, const TileSet src) {
-  int l = 0;
-  int c = 0;
-  int2 size = { 0 };
-  if(src.size.b < dest.size.b) size.b = src.size.b - 1;
-  else size.b = dest.size.b -1;
-  if(src.size.a < dest.size.a) size.a = src.size.a - 1;
-  else size.a = dest.size.a;
-  for(l = 0; l < size.b; l++ ) {
-    for(c = 0; c < size.a; c++ ) {
-      SetVectorValue(&dest.tiles, c + l * dest.size.a, AccessVectorElement( c + l * src.size.a, src.tiles));      
-      if(c == dest.size.a - 1 || c == 0 || l == dest.size.b - 1 || l == 0 ) ((Tile*)AccessVectorElement( c + l*dest.size.a, dest.tiles))->border = true;
-      else ((Tile*)AccessVectorElement( c + l * dest.size.a, dest.tiles))->border = false;
-    }
-    c = 0;
-  }
-  return dest;
-}
-
-void ExportTileSet(TileSet t, char* target_file) {
-  ExportTypeSet(t.typeset);
-  FILE* target = fopen(target_file, "w");
-  fprintf(target, "%s; %i; %i; \n", t.typeset.name ,t.size.a, t.size.b);
-  for(int i = 0; i < t.size.a*t.size.b; i++) {
-    fprintf(target, "%i %i \n", i,
-	    ((Tile*)AccessVectorElement(i, t.tiles))->type->id);
-
-  }
-  fclose(target);
-}
-
-TileSet LoadTileSet(char* target_file) {
-  FILE* f = fopen(target_file, "r");
-  if (!f) {
-    perror (target_file);
-    exit (1);
-  }
-  fseek(f, 0, SEEK_END);
-  long fsize = ftell(f);
-  rewind(f);
-  char *string = malloc(fsize + 1);
-  fread(string, fsize, 1, f);
-  fclose(f);
-  
-  int j = 0;
-  int i = 0;
-  int r = 0;
-  char* eval = calloc(fsize, sizeof(char));
-  char* typeset_name = calloc(fsize, sizeof(char)); 
-  int size[2] = {0};
-  for(i = 0; i < fsize; i++) {
-    if(string[i] != ';' && string[i] != ' ' ) {
-      eval[r] = string[i];
-      r++;
-    }
-    else if(string[i] == ';') {
-      if(j == 0) memcpy(typeset_name, eval, strlen(eval)*sizeof(char));
-      else size[j - 1] = atoi(eval);
-      j++;
-      r = 0;
-      free(eval);
-      eval = calloc(fsize, sizeof(char));
-    }
-    if(string[i] == '\n') {
-      break;
-    }
-  }
-  free(eval);
-  eval = calloc(fsize, sizeof(char));
-  TileSet output = NewTileSet(LoadTypeSet(typeset_name), (int2){size[0], size[1]});
-  free(typeset_name);
-  j = 0;
-  int nth_element = 0;
-  int nth_tile = 0;
-  for(int k = i + 1; k < fsize; k++) {
-    if(string[k] !=  '\n' && string[k] != ' ') {
-      eval[r] = string[k];
-      r++;
-    }
-    else {
-      switch (nth_element)
-	{
-	case 0:nth_tile = atoi(eval); break;
-	case 1: ((Tile*)AccessVectorElement(nth_tile, output.tiles))->type =
-	    ((TerrainType*)AccessVectorElement(atoi(eval), output.typeset.types)); break;
-	}
-      nth_element++;
-      free(eval);
-      r = 0;
-      eval = calloc(fsize, sizeof(char));
-      if(string[k] == '\n') {
-	nth_element = 0;
-      }
-    }
-  }
-  free(eval);
-  return output;
-}
-
-void RenderTileSet(TileSet tileset ) {
-  for(int i = 0; i < tileset.size.a*tileset.size.b;
-	i++) {
-    if(!((Tile*)AccessVectorElement( i, tileset.tiles))->border) {
-    DrawTextureEx(((Tile*)AccessVectorElement( i, tileset.tiles ))->type->tex, ((Tile*)AccessVectorElement( i, tileset.tiles))->pos, 0.0f, 1.0f, WHITE);
-    }
-  }
-}
rmfile ./tileset.h

Context:

[initial build
manu@basilisk.fr**20220312182927
 Ignore-this: 9b34e2b7f3d00e81447f8fb2de8269b3
] 
Patch bundle hash:
359e2cfedfcabf532d92a32fa402b3923adb008c
